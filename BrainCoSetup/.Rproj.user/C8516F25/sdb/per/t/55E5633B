{
    "contents" : "## TODO: modify the functions when the repository is set up\n\nBCoInstallRepos <-\n    function(siteRepos=character())\n{\n    ## siteRepos argument is public, but need the version of BrainConductor internally\n    .BCoInstallRepos(siteRepos=siteRepos, braincoversion=BrainCoVersion())\n}\n\n.BCoInstallRepos <-\n    function(siteRepos=character(), braincoversion)\n{\n    old.opts <- options(\"repos\")\n    on.exit(options(old.opts))\n\n    ## The BrainConductor software is not included in   \n    ## the list of available repositories:\n\n    ## CRAN, CRANextra(windows only), \n    ## Omegahat(windows only), \n    ## BioCsoft, BioCann, BioCexp, BioCextra\n    ## R-Forge, rforge.net\n\n    ## This function manually add a repository of BrainConductor.\n\n    setRepositories(ind=1:15) # in case more repos are added\n    repos <- getOption(\"repos\")\n\n    ## Uncomment these lines when the website is set up.\n    ## braincoMirror <- getOption(\"BrainCo_mirror\", \"http://bioconductor.org\")\n    ## braincoPaths <- c(BrainCo_soft=\"BrainCo\")\n    ## braincoRepos <- paste(braincoMirror, \"packages\", braincoversion,\n    ##                    braincoPaths, sep=\"/\")\n    ## repos[names(braincoPaths)] <- braincoRepos\n    \n    ## remember to modify these lines when the website is set up.\n    repos[\"BrainCo_soft\"]  <- \"http://58.96.191.67/packages/BrainCo\"\n    keepRepos <- if (.Platform$OS.type %in% \"windows\") {\n        c(\"BrainCo_soft\", \n    ##    \"R-Forge\", \n    ##    \"rforge.net\", \n          \"CRAN\", \"CRANextra\")\n    } else {\n        c(\"BrainCo_soft\", \n    ##    \"R-Forge\", \n    ##    \"rforge.net\",\n          \"CRAN\")\n    }\n    ########\n    \n    repos <- repos[keepRepos]\n    repos <- subset(repos, !is.na(repos))\n\n    if (\"@CRAN@\" %in% repos)\n        repos[\"CRAN\"] <- \"http://cran.fhcrc.org\"\n    \n    c(siteRepos=siteRepos, repos)\n}\n\n.BCoInstall <-\n    function(pkgs, ask, \n             suppressUpdates, \n             siteRepos=character(),\n             lib.loc=.libPaths(), lib=.libPaths()[1], ...)\n{\n\n    if (!(is.character(suppressUpdates) || is.logical(suppressUpdates)) ||\n        (is.logical(suppressUpdates) && 1L != length(suppressUpdates)))\n        .stop(\"'suppressUpdates' must be character() or logical(1)\")\n\n    type <- list(...)[[\"type\"]]\n    if (is.null(type))\n        type <- getOption(\"pkgType\")\n\n    ## braincoMirror <- getOption(\"BrainCo_mirror\", \"http://brainconductor.org\")\n    ## .msg(\"BrainCo_mirror: %s\", braincoMirror)\n\n    version <- getRversion()\n    ##thisRVer <- sprintf(\"%d.%d\", version$major, version$minor)\n    .msg(\"Using Brainconductor version %s (BrainCoSetup %s), R version %s.\",\n             BrainCoVersion(), packageVersion(\"BrainCoSetup\"), version)\n\n    if (!suppressPackageStartupMessages(require(\"utils\", quietly=TRUE)))\n        .stop(\"cannot load package 'utils'\")\n    ##if (compareVersion(thisRVer, NEXT_R_DEVEL_VERSION) >= 0)\n    ##    .msg(\"Temporarily using Bioconductor version %s\",\n    ##             biocVersion())\n\n    repos <- BCoInstallRepos(siteRepos)\n\n    if (length(pkgs)) {\n        \n        .msg(\"Installing package(s) '%s'\",\n                 paste(pkgs, collapse=\"' '\"))\n        install.packages(pkgs=pkgs, lib=lib, repos=repos, ...)\n    }\n\n    ##early exit if suppressUpdates\n    if (is.logical(suppressUpdates) && suppressUpdates)\n        return(invisible(pkgs))\n    pkgsToUpdate <- old.packages(repos=repos, lib.loc=lib.loc)\n    if (is.null(pkgsToUpdate))\n        return(invisible(pkgs))\n\n    if (!is.logical(suppressUpdates)) {\n        pkgsToUpdate <-\n            filterPkgsToUpdate(suppressUpdates, pkgsToUpdate)\n        suppressUpdates <- FALSE\n    }\n\n    oldPkgs <- getUpdateablePkgs(pkgsToUpdate)\n    if (nrow(oldPkgs)) {\n        pkgList <- paste(oldPkgs[,\"Package\"], collapse=\"', '\")\n        if (ask==TRUE) {\n            .msg(\"Old packages: '%s'\", pkgList)\n            \n            UpdateSelection <-\n                .getUpdateSelection(\"Update all/some/none? [a/s/n]: \",\n                         allowed = c(\"a\", \"A\", \"s\", \"S\", \"n\", \"N\"))\n\n            switch(UpdateSelection,\n                   a = update.packages(repos=repos, oldPkgs=oldPkgs, ask=FALSE),\n                   s = update.packages(repos=repos, oldPkgs=oldPkgs, ask=TRUE),\n                   n = invisible(pkgs))\n        } else {\n            .msg(\"Updating packages '%s'\", pkgList)\n            update.packages(repos=repos, oldPkgs=oldPkgs, ask=ask)\n        }\n    }\n    \n    invisible(pkgs)\n}\n\n.getUpdateSelection <- function (msg, allowed)\n{\n    if (interactive()) {\n        repeat {\n            cat(msg)\n            ans <- readLines(n = 1)\n            if (ans %in% allowed)\n              break\n        }    \n        tolower(ans)\n    } else {\n        \"n\"\n    }\n}\n\n.InstallMedicalImgTV <- function (views = \"MedicalImaging\",\n                           coreOnly = FALSE,\n                           ctvrepos = NULL)\n{\n  if (!suppressWarnings(require(\"ctv\", quietly=TRUE))) {\n    install.packages(\"ctv\")\n    suppressPackageStartupMessages (require(\"ctv\", quietly=TRUE))\n  } else {\n    suppressPackageStartupMessages (require(\"ctv\", quietly=TRUE))    \n  }   \n  ctv::install.views(views = views, coreOnly = coreOnly, repos = ctvrepos)\n}\n\nBCoInstall <- function(pkgs=c(\"Biobase\"),\n##           No old versions to be updated right now\n             suppressUpdates=FALSE,\n             suppressAutoUpdate=FALSE,\n             siteRepos=character(), ask=TRUE, \n             installmedicalimgTV = NULL, coreOnly = TRUE, ctvrepos = NULL, \n             ...)\n{\n    if (missing(pkgs))  { # BCoInstall() update w/out installing defaults\n        pkgs <- pkgs[!pkgs %in% (.packages(all.available = TRUE))]\n    }\n    if (is.null(installmedicalimgTV))   {\n        MITV_pkglist <- .MedicalImaging_group_pkglist(coreOnly = coreOnly)\n        MITV_pkgs <- MITV_pkglist[[rownames(MITV_pkglist)]]\n        MITV_pkgs <- MITV_pkgs[!MITV_pkgs %in% (.packages(all.available = TRUE))]\n        for (i in seq(along = MITV_pkglist)) install.packages(MITV_pkgs[i], repos = names(MITV_pkglist)[i], ...)\n        invisible()\n    }  \n    else if (installmedicalimgTV)\n        .InstallMedicalImgTV(coreOnly = coreOnly, ctvrepos = ctvrepos)\n    \n    if (!suppressAutoUpdate && !BCoPkgIsCurrent()) {\n        on.exit(updateBCoPkgs(pkgs, ask=ask,\n                                          suppressUpdates=suppressUpdates,\n                                          siteRepos=siteRepos, ...))\n    }\n    ##else \n    ##if (\"BCoUpgrade\" %in% pkgs) {\n    ##    .BCoUpgrade()\n    ##} \n    ##else {\n    .BCoInstall(pkgs, ask=ask, siteRepos=siteRepos,\n                     suppressUpdates=suppressUpdates, ...)\n    ##}\n}\n",
    "created" : 1457578274388.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3388919973",
    "id" : "55E5633B",
    "lastKnownWriteTime" : 1433303068,
    "path" : "~/GitHub/BrainConductor/BrainCoSetup/R/BCoInstall.R",
    "project_path" : "R/BCoInstall.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}