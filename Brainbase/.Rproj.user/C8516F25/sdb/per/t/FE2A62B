{
    "contents" : "\n\n#This Method 'read.nii' can read NIFTI S4 class from .nii files\n\nsetGeneric(\"read.nii\",function(object, filename)  standardGeneric(\"read.nii\"));\n\nsetMethod(\"read.nii\", signature(object = \"NIdata\"), function(object, filename)\n{\n  object <- new('NIdata')\n  con <- file(filename,'rb');\n  endian <- if ((sizeof_hdr <- readBin(con,\"int\",1,4,endian=\"little\")) == 348) \"little\" else \"big\"\n  object@sizeof_hdr <- 348\n  object@data_type <- readChar(con,10,TRUE)\n  object@db_name <- readChar(con,18,TRUE)\n  object@extents <- readBin(con,'int',1,4,endian = endian)\n  object@session_error <- readBin(con,'int',1,2,endian=endian)\n  object@regular <- readChar(con,1,TRUE)\n  object@dim_info <- readChar(con,1,TRUE)\n  object@dim_ = readBin(con,'int',8,2,endian=endian)\n  object@intent_p1 <- readBin(con,'double',1,4,endian=endian)\n  object@intent_p2 <- readBin(con,'double',1,4,endian=endian)\n  object@intent_p3 <- readBin(con,'double',1,4,endian=endian)\n  object@intent_code <- readBin(con,'int',1,2,endian=endian)\n  object@datatype <- readBin(con,'int',1,2,endian=endian)\n  object@bitpix <- readBin(con,'int',1,2,endian=endian)\n  object@slice_start <- readBin(con,'int',1,2,endian=endian)\n  object@pixdim <- readBin(con,'double',8,4,endian=endian)\n  object@vox_offset <- readBin(con,'double',1,4,endian=endian)\n  object@scl_slope <- readBin(con,'double',1,4,endian=endian)\n  object@scl_inter <- readBin(con,'double',1,4,endian=endian)\n  object@slice_end <- readBin(con,'int',1,2,endian=endian)\n  object@slice_code <- readChar(con,1,TRUE)\n  object@xyzt_units <- readChar(con,1,TRUE)\n  object@cal_min <- readBin(con,'double',1,4,endian=endian)\n  object@cal_max <- readBin(con,'double',1,4,endian=endian)\n  object@slice_duration <- readBin(con,'double',1,4,endian=endian)\n  object@toffset <- readBin(con,'double',1,4,endian=endian)\n  object@glmax <- readBin(con,'int',1,4,endian=endian)\n  object@glmin <- readBin(con,'int',1,4,endian=endian)\n\n  object@descrip <- readChar(con,80,TRUE)\n  object@aux_file <- readChar(con,24,TRUE)\n\n  object@qform_code <- readBin(con,'int',1,2,endian=endian)\n  object@sform_code <- readBin(con,'int',1,2,endian=endian)\n\n  object@quatern_b <- readBin(con,'double',1,4,endian=endian)\n  object@quatern_c <- readBin(con,'double',1,4,endian=endian)\n  object@quatern_d <- readBin(con,'double',1,4,endian=endian)\n  object@qoffset_x <- readBin(con,'double',1,4,endian=endian)\n  object@qoffset_y <- readBin(con,'double',1,4,endian=endian)\n  object@qoffset_z <- readBin(con,'double',1,4,endian=endian)\n\n  object@srow_x <- readBin(con,'double',4,4,endian=endian)\n  object@srow_y <- readBin(con,'double',4,4,endian=endian)\n  object@srow_z <- readBin(con,'double',4,4,endian=endian)\n\n  object@intent_name <- readChar(con,16,TRUE)\n  object@magic <- readChar(con,4,TRUE)\n  object@extender <- readChar(con,4,TRUE)\n  object@file_type <- \"NIFTI\"\n  bp = 352;\n  id = 1;\n\n  if (object@extender != \"\")\n  {\n    while (bp < object@vox_offset)\n    {\n      object@extention$esize[[id]] <- readBin(con,'int',1,4,endian=endian)\n      object@extention$ecode[[id]] <- readBin(con,'int',1,4,endian=endian)\n      object@extention$edata[[id]] <- readChar(con,object@extention$esize[[id]] - 8,TRUE)\n      bp <- bp + object@extention$esize[[id]]\n      id <- id + 1\n    }\n  }\n\n  dx <- object@dim_[2]\n  dy <- object@dim_[3]\n  dz <- object@dim_[4]\n  dt <- object@dim_[5]\n  dd <- object@dim_[6]\n\n  if (object@datatype == 1)   #binary\n  {\n    type <- \"raw\"\n    size <- 1  #may be wrong\n    signed <- TRUE\n  }\n\n  else if (object@datatype == 2)  #unsigned char\n  {\n    type <- \"int\"\n    signed <- FALSE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 1\n  }\n  else if (object@datatype == 4)  #signed short\n  {\n    type <- \"int\"\n    signed <- TRUE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 2\n  }\n  else if (object@datatype == 8) #signed int\n  {\n    type <- \"int\"\n    signed <- TRUE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 4\n  }\n\n  else if (object@datatype == 16) #float\n  {\n    type <- \"double\"\n    signed <- TRUE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 4\n  }\n  else if (object@datatype == 32) #complex\n  {\n    type <- \"complex\"\n    signed <- TRUE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 8\n  }\n  else if (object@datatype == 64) #double\n  {\n    type <- \"double\"\n    signed <- TRUE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 8\n  }\n\n  else if (object@datatype == 128) #RGB\n  {\n    type <- \"int\"\n    signed <- TRUE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 3\n  }\n  else\n  {\n    type <- 'int'\n    signed <- TRUE\n    size <- 1\n  }\n\n  object@image <- array(readBin(con,type,dx * dy * dz * dt * dd, size, signed = signed, endian = endian) ,dim =\n                          if(object@dim_[1] == 5) c(dx,dy,dz,dt,dd)\n                        else if (object@dim_[1] == 4) c(dx,dy,dz,dt)\n                        else if (object@dim_[1] == 3) c(dx,dy,dz)\n                        else if (object@dim_[1] == 2) c(dx,dy)\n  )\n\n  close(con)\n  object\n}\n)\n\nread.NIFTI.nii <- function(filename)\n{\n  a <- new(\"NIdata\")\n  read.nii(a,filename)\n\n}\n\n\nsetGeneric(\"read.hdr_img\",function(object, filename  )  standardGeneric(\"read.hdr_img\"))\n\nsetMethod(\"read.hdr_img\", signature(object = \"NIdata\"), function(object, filename )\n{\n  object <- new('NIdata')\n  con <- file(paste(filename,'.hdr',sep=\"\"),'rb')\n  endian <- if ((sizeof_hdr <- readBin(con,\"int\",1,4,endian=\"little\")) == 348) \"little\" else \"big\"\n  object@sizeof_hdr <- 348\n  object@data_type <- readChar(con,10,TRUE)\n  object@db_name <- readChar(con,18,TRUE)\n  object@extents <- readBin(con,'int',1,4,endian = endian)\n  object@session_error <- readBin(con,'int',1,2,endian=endian)\n  object@regular <- readChar(con,1,TRUE)\n  object@dim_info <- readChar(con,1,TRUE)\n  object@dim_ = readBin(con,'int',8,2,endian=endian)\n  object@intent_p1 <- readBin(con,'double',1,4,endian=endian)\n  object@intent_p2 <- readBin(con,'double',1,4,endian=endian)\n  object@intent_p3 <- readBin(con,'double',1,4,endian=endian)\n  object@intent_code <- readBin(con,'int',1,2,endian=endian)\n  object@datatype <- readBin(con,'int',1,2,endian=endian)\n  object@bitpix <- readBin(con,'int',1,2,endian=endian)\n  object@slice_start <- readBin(con,'int',1,2,endian=endian)\n  object@pixdim <- readBin(con,'double',8,4,endian=endian)\n  object@vox_offset <- readBin(con,'double',1,4,endian=endian)\n  object@scl_slope <- readBin(con,'double',1,4,endian=endian)\n  object@scl_inter <- readBin(con,'double',1,4,endian=endian)\n  object@slice_end <- readBin(con,'int',1,2,endian=endian)\n  object@slice_code <- readChar(con,1,TRUE)\n  object@xyzt_units <- readChar(con,1,TRUE)\n  object@cal_min <- readBin(con,'double',1,4,endian=endian)\n  object@cal_max <- readBin(con,'double',1,4,endian=endian)\n  object@slice_duration <- readBin(con,'double',1,4,endian=endian)\n  object@toffset <- readBin(con,'double',1,4,endian=endian)\n  object@glmax <- readBin(con,'int',1,4,endian=endian)\n  object@glmin <- readBin(con,'int',1,4,endian=endian)\n\n  object@descrip <- readChar(con,80,TRUE)\n  object@aux_file <- readChar(con,24,TRUE)\n\n  object@qform_code <- readBin(con,'int',1,2,endian=endian)\n  object@sform_code <- readBin(con,'int',1,2,endian=endian)\n\n  object@quatern_b <- readBin(con,'double',1,4,endian=endian)\n  object@quatern_c <- readBin(con,'double',1,4,endian=endian)\n  object@quatern_d <- readBin(con,'double',1,4,endian=endian)\n  object@qoffset_x <- readBin(con,'double',1,4,endian=endian)\n  object@qoffset_y <- readBin(con,'double',1,4,endian=endian)\n  object@qoffset_z <- readBin(con,'double',1,4,endian=endian)\n\n  object@srow_x <- readBin(con,'double',4,4,endian=endian)\n  object@srow_y <- readBin(con,'double',4,4,endian=endian)\n  object@srow_z <- readBin(con,'double',4,4,endian=endian)\n\n  object@intent_name <- readChar(con,16,TRUE)\n  object@magic <- readChar(con,4,TRUE)\n  object@extender <- readChar(con,4,TRUE)\n  object@file_type <- \"NIFTI\"\n  id <- 1\n\n  if (object@extender != \"\")\n  {\n    while (1)\n    {\n      e_size = readBin(con,'int',1,4,endian=endian);\n      if (length(e_size) == 0)\n      {\n        break;\n      }\n      object@extention$esize[[id]] <- readBin(con,'int',1,4,endian=endian)\n      object@extention$ecode[[id]] <- readBin(con,'int',1,4,endian=endian)\n      object@extention$edata[[id]] <- readChar(con,object@extention$esize[[id]] - 8,TRUE)\n      bp <- bp + object@extention$esize[[id]]\n      id <- id + 1\n    }\n  }\n\n  dx <- object@dim_[2]\n  dy <- object@dim_[3]\n  dz <- object@dim_[4]\n  dt <- object@dim_[5]\n  dd <- object@dim_[6]\n\n  if (object@datatype == 1)   #binary\n  {\n    type <- \"raw\"\n    size <- 1  #may be wrong\n    signed <- TRUE\n  }\n\n  else if (object@datatype == 2)  #unsigned char\n  {\n    type <- \"int\"\n    signed <- FALSE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 1\n  }\n  else if (object@datatype == 4)  #signed short\n  {\n    type <- \"int\"\n    signed <- TRUE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 2\n  }\n  else if (object@datatype == 8) #signed int\n  {\n    type <- \"int\"\n    signed <- TRUE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 4\n  }\n\n  else if (object@datatype == 16) #float\n  {\n    type <- \"double\"\n    signed <- TRUE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 4\n  }\n  else if (object@datatype == 32) #complex\n  {\n    type <- \"complex\"\n    signed <- TRUE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 8\n  }\n  else if (object@datatype == 64) #double\n  {\n    type <- \"double\"\n    signed <- TRUE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 8\n  }\n\n  else if (object@datatype == 128) #RGB\n  {\n    type <- \"int\"\n    signed <- TRUE\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 3\n  }\n  else\n  {\n    type <- 'int'\n    signed <- TRUE\n    size <- 1\n  }\n\n  close(con)\n  con <- file(paste(filename,'.img',sep=\"\"),'rb')\n\n  object@image <- array(readBin(con,type,dx * dy * dz * dt * dd, size, signed = signed, endian = endian) ,dim =\n                          if(object@dim_[1] == 5) c(dx,dy,dz,dt,dd)\n                        else if (object@dim_[1] == 4) c(dx,dy,dz,dt)\n                        else if (object@dim_[1] == 3) c(dx,dy,dz)\n                        else if (object@dim_[1] == 2) c(dx,dy)\n  )\n\n  close(con)\n  object\n}\n)\n\nread.NIFTI.hdr_img <- function(filename) #no .img and .hdr in filename\n{\n  a <- new(\"NIdata\")\n  read.hdr_img(a,filename)\n\n}\n\n",
    "created" : 1457789715554.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2042365364",
    "id" : "FE2A62B",
    "lastKnownWriteTime" : 1458035431,
    "path" : "~/GitHub/BrainConductor/Brainbase/R/readNIFTI.R",
    "project_path" : "R/readNIFTI.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}