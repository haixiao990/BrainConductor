{
    "contents" : "\nsetGeneric(\"write.nii\",function(object, filename ,endian )  standardGeneric(\"write.nii\"));\n\nsetMethod(\"write.nii\", signature(object = \"NIdata\"), function(object, filename, endian )\n{\n  con = file(filename,'wb')\n  writeBin(as.integer(348),con,4,endian=endian)\n  writeChar(object@data_type,con,10,NULL)\n  writeChar(object@db_name,con,18,NULL)\n  writeBin(object@extents,con,4,endian=endian)\n  writeBin(object@session_error,con,2,endian=endian)\n  writeChar(object@regular,con,1,NULL)\n  writeChar(object@dim_info,con,1,NULL)\n  writeBin(object@dim_,con,2,endian=endian)\n  writeBin(object@intent_p1,con,4,endian=endian)\n  writeBin(object@intent_p2,con,4,endian=endian)\n  writeBin(object@intent_p3,con,4,endian=endian)\n  writeBin(object@intent_code,con,2,endian=endian)\n  #writeBin(object@intent_code,con,2,endian=endian)\n  writeBin(object@datatype,con,2,endian=endian)\n  writeBin(object@bitpix,con,2,endian=endian)\n  writeBin(object@slice_start,con,2,endian=endian)\n  writeBin(object@pixdim,con,4,endian=endian)\n  writeBin(object@vox_offset,con,4,endian=endian)\n  writeBin(object@scl_slope,con,4,endian=endian)\n  writeBin(object@scl_inter,con,4,endian=endian)\n  writeBin(object@slice_end,con,2,endian=endian)\n  writeChar(object@slice_code,con,1,NULL)\n  writeChar(object@xyzt_units,con,1,NULL)\n  writeBin(object@cal_min,con,4,endian=endian)\n  writeBin(object@cal_max,con,4,endian=endian)\n  writeBin(object@slice_duration,con,4,endian=endian)\n  writeBin(object@toffset,con,4,endian=endian)\n  writeBin(object@glmax,con,4,endian=endian)\n  writeBin(object@glmin,con,4,endian=endian)\n\n  writeChar(object@descrip,con,80,NULL)\n  writeChar(object@aux_file,con,24,NULL)\n\n  writeBin(object@qform_code,con,2,endian=endian)\n  writeBin(object@sform_code,con,2,endian=endian)\n\n  writeBin(object@quatern_b,con,4,endian=endian)\n  writeBin(object@quatern_c,con,4,endian=endian)\n  writeBin(object@quatern_d,con,4,endian=endian)\n  writeBin(object@qoffset_x,con,4,endian=endian)\n  writeBin(object@qoffset_y,con,4,endian=endian)\n  writeBin(object@qoffset_z,con,4,endian=endian)\n\n  writeBin(object@srow_x,con,4,endian=endian)\n  writeBin(object@srow_y,con,4,endian=endian)\n  writeBin(object@srow_z,con,4,endian=endian)\n\n  writeChar(object@intent_name,con,16,NULL)\n  writeChar(object@magic,con,4,NULL)\n  writeChar(object@extender,con,4,NULL)\n\n  if (object@extender != \"\")\n  {\n    for (id in 1 : length(object@extention$esize))\n    {\n      writeBin(object@extention$esize[[id]],con,4,endian=endian)\n      writeBin(object@extention$ecode[[id]],con,4,endian=endian)\n      writeChar(object@extention$edata[[id]],con,object@extention$esize[[id]]-8,NULL)\n    }\n  }\n\n  dx <- object@dim_[2]\n  dy <- object@dim_[3]\n  dz <- object@dim_[4]\n  dt <- object@dim_[5]\n  dd <- object@dim_[6]\n\n  if (object@datatype == 1)   #binary\n  {\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 1\n    writeBin(as.raw(object@image),con,size,endian=endian)\n  }\n\n  else if (object@datatype == 2)  #unsigned char\n  {\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 1\n    writeBin(as.integer(object@image),con,size,endian=endian)\n  }\n  else if (object@datatype == 4)  #signed short\n  {\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 2\n    writeBin(as.integer(object@image),con,size,endian=endian)\n  }\n  else if (object@datatype == 8) #signed int\n  {\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 4\n    writeBin(as.integer(object@image),con,size,endian=endian)\n  }\n\n  else if (object@datatype == 16) #float\n  {\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 4\n    writeBin(as.double(object@image),con,size,endian=endian)\n  }\n  else if (object@datatype == 32) #complex\n  {\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 8\n    writeBin(as.complex(object@image),con,size,endian=endian)\n  }\n  else if (object@datatype == 64) #double\n  {\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 8\n    writeBin(as.double(object@image),con,size,endian=endian)\n  }\n\n  else if (object@datatype == 128) #RGB\n  {\n    size <- if (object@bitpix) object@bitpix / dd / 8 else 3\n    writeBin(as.integer(object@image),con,size,endian=endian)\n  }\n  else\n  {\n    size <- 1\n    writeBin(as.integer(object@image),con,size,endian=endian)\n  }\n  close(con)\n}\n)\n\nwrite.NIFTI.nii <- function(Object,filename,endian='big')\n{\n  write.nii(Object,filename, endian = endian)\n}\n\n\n",
    "created" : 1457790251520.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "355852841",
    "id" : "622DB28A",
    "lastKnownWriteTime" : 1457795547,
    "path" : "~/GitHub/BrainConductor/Brainbase/R/writeNIFTI.R",
    "project_path" : "R/writeNIFTI.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}